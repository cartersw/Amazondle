import type { ClerkOptions } from '@clerk/backend';
import { Clerk as _Clerk, verifyToken as _verifyToken } from '@clerk/backend';
import { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';
import { createClerkExpressWithAuth } from './clerkExpressWithAuth';
type ExtendedClerk = ReturnType<typeof _Clerk> & {
    expressWithAuth: ReturnType<typeof createClerkExpressWithAuth>;
    expressRequireAuth: ReturnType<typeof createClerkExpressRequireAuth>;
    verifyToken: (token: string, verifyOpts?: Parameters<typeof _verifyToken>[1]) => ReturnType<typeof _verifyToken>;
} & ReturnType<typeof createBasePropForRedwoodCompatibility>;
/**
 * This needs to be a *named* function in order to support the older
 * new Clerk() syntax for v4 compatibility.
 * Arrow functions can never be called with the new keyword because they do not have the [[Construct]] method
 */
export declare function Clerk(options: ClerkOptions): ExtendedClerk;
declare const createBasePropForRedwoodCompatibility: () => {
    base: {
        verifySessionToken: (token: string) => Promise<import("@clerk/types").JwtPayload>;
    };
};
export declare const createClerkClient: typeof Clerk;
export declare const clerkClient: ExtendedClerk;
/**
 * Stand-alone express middlewares bound to the pre-initialised clerkClient
 */
export declare const ClerkExpressRequireAuth: (options?: import("./types").ClerkMiddlewareOptions | undefined) => import("./types").MiddlewareRequireAuthProp;
export declare const ClerkExpressWithAuth: (options?: import("./types").ClerkMiddlewareOptions | undefined) => import("./types").MiddlewareWithAuthProp;
/**
 * Stand-alone setters bound to the pre-initialised clerkClient
 */
export declare const setClerkApiKey: (value: string) => void;
export declare const setClerkServerApiUrl: (value: string) => void;
export declare const setClerkApiVersion: (value: string) => void;
export declare const setClerkHttpOptions: (value: RequestInit) => void;
export {};
//# sourceMappingURL=clerkClient.d.ts.map